// <auto-generated />
using System;
using CapstoneBlazorServerSite.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CapstoneBlazorServerSite.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20231220181814_SeedMoreCareerStatsAndApplicationUser")]
    partial class SeedMoreCareerStatsAndApplicationUser
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("CapstoneBlazorServerSite.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "hij432",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "459c5708-e8c8-405f-8b16-fe56963ca639",
                            Email = "ao@ao.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "AO@AO.COM",
                            NormalizedUserName = "ALPHAOMEGA",
                            PasswordHash = "AQAAAAIAAYagAAAAEDqdGvoj2fxZqiNfzP6aRfOReRsvCs6B8Man0I8ddZ6kx4quqm357Zzpx8XTRjPauQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "93d9310d-5f67-4490-b3c6-fc1c863689a8",
                            TwoFactorEnabled = false,
                            UserName = "AlphaOmega"
                        });
                });

            modelBuilder.Entity("CapstoneBlazorServerSite.Models.CareerStats", b =>
                {
                    b.Property<string>("PlayerId")
                        .HasColumnType("varchar(255)");

                    b.Property<double>("CareerMinutesPlayed")
                        .HasColumnType("double");

                    b.Property<uint>("CareerNumberOfWords")
                        .HasColumnType("int unsigned");

                    b.Property<double>("CareerPointsPerMinute")
                        .HasColumnType("double");

                    b.Property<double>("CareerPointsPerWord")
                        .HasColumnType("double");

                    b.Property<uint>("CareerScore")
                        .HasColumnType("int unsigned");

                    b.Property<uint>("HighScore")
                        .HasColumnType("int unsigned");

                    b.Property<string>("PlayerName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("PlayerId");

                    b.ToTable("CareerStats");

                    b.HasData(
                        new
                        {
                            PlayerId = "abc123",
                            CareerMinutesPlayed = 315.0,
                            CareerNumberOfWords = 450u,
                            CareerPointsPerMinute = 10.476190476190476,
                            CareerPointsPerWord = 7.0,
                            CareerScore = 3300u,
                            HighScore = 375u,
                            PlayerName = "Player A"
                        },
                        new
                        {
                            PlayerId = "def456",
                            CareerMinutesPlayed = 175.0,
                            CareerNumberOfWords = 230u,
                            CareerPointsPerMinute = 5.1428571428571432,
                            CareerPointsPerWord = 3.0,
                            CareerScore = 900u,
                            HighScore = 112u,
                            PlayerName = "Player B"
                        },
                        new
                        {
                            PlayerId = "ghi789",
                            CareerMinutesPlayed = 1037.4400000000001,
                            CareerNumberOfWords = 941u,
                            CareerPointsPerMinute = 5.7767196175200493,
                            CareerPointsPerWord = 6.0,
                            CareerScore = 5993u,
                            HighScore = 749u,
                            PlayerName = "Player C"
                        },
                        new
                        {
                            PlayerId = "jkl098",
                            CareerMinutesPlayed = 401.88900000000001,
                            CareerNumberOfWords = 233u,
                            CareerPointsPerMinute = 2.0328996314902872,
                            CareerPointsPerWord = 3.0,
                            CareerScore = 817u,
                            HighScore = 206u,
                            PlayerName = "Player D"
                        },
                        new
                        {
                            PlayerId = "mno765",
                            CareerMinutesPlayed = 698.17100000000005,
                            CareerNumberOfWords = 827u,
                            CareerPointsPerMinute = 9.9001534008144123,
                            CareerPointsPerWord = 8.0,
                            CareerScore = 6912u,
                            HighScore = 571u,
                            PlayerName = "Player E"
                        },
                        new
                        {
                            PlayerId = "pqr432",
                            CareerMinutesPlayed = 506.47399999999999,
                            CareerNumberOfWords = 769u,
                            CareerPointsPerMinute = 9.9866923079960674,
                            CareerPointsPerWord = 6.0,
                            CareerScore = 5058u,
                            HighScore = 445u,
                            PlayerName = "Player F"
                        },
                        new
                        {
                            PlayerId = "stu123",
                            CareerMinutesPlayed = 714.62699999999995,
                            CareerNumberOfWords = 1738u,
                            CareerPointsPerMinute = 10.843419014394923,
                            CareerPointsPerWord = 4.0,
                            CareerScore = 7749u,
                            HighScore = 603u,
                            PlayerName = "Player G"
                        },
                        new
                        {
                            PlayerId = "vwx456",
                            CareerMinutesPlayed = 552.20600000000002,
                            CareerNumberOfWords = 642u,
                            CareerPointsPerMinute = 7.5424750908175566,
                            CareerPointsPerWord = 6.0,
                            CareerScore = 4165u,
                            HighScore = 592u,
                            PlayerName = "Player H"
                        },
                        new
                        {
                            PlayerId = "yza789",
                            CareerMinutesPlayed = 112.983,
                            CareerNumberOfWords = 194u,
                            CareerPointsPerMinute = 6.6912721382862905,
                            CareerPointsPerWord = 3.0,
                            CareerScore = 756u,
                            HighScore = 93u,
                            PlayerName = "Player I"
                        },
                        new
                        {
                            PlayerId = "bcd098",
                            CareerMinutesPlayed = 663.72000000000003,
                            CareerNumberOfWords = 775u,
                            CareerPointsPerMinute = 11.186946302657747,
                            CareerPointsPerWord = 9.0,
                            CareerScore = 7425u,
                            HighScore = 832u,
                            PlayerName = "Player J"
                        },
                        new
                        {
                            PlayerId = "efg765",
                            CareerMinutesPlayed = 1025.9100000000001,
                            CareerNumberOfWords = 2716u,
                            CareerPointsPerMinute = 8.6440331023189163,
                            CareerPointsPerWord = 3.0,
                            CareerScore = 8868u,
                            HighScore = 158u,
                            PlayerName = "Player K"
                        },
                        new
                        {
                            PlayerId = "hij432",
                            CareerMinutesPlayed = 372.0,
                            CareerNumberOfWords = 419u,
                            CareerPointsPerMinute = 8.599462365591398,
                            CareerPointsPerWord = 7.0,
                            CareerScore = 3199u,
                            HighScore = 313u,
                            PlayerName = "AlphaOmega"
                        },
                        new
                        {
                            PlayerId = "klm123",
                            CareerMinutesPlayed = 100.0,
                            CareerNumberOfWords = 175u,
                            CareerPointsPerMinute = 6.9800000000000004,
                            CareerPointsPerWord = 3.0,
                            CareerScore = 698u,
                            HighScore = 71u,
                            PlayerName = "Player L"
                        },
                        new
                        {
                            PlayerId = "nop456",
                            CareerMinutesPlayed = 200.0,
                            CareerNumberOfWords = 250u,
                            CareerPointsPerMinute = 4.0,
                            CareerPointsPerWord = 3.0,
                            CareerScore = 800u,
                            HighScore = 100u,
                            PlayerName = "Player M"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CapstoneBlazorServerSite.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CapstoneBlazorServerSite.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CapstoneBlazorServerSite.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CapstoneBlazorServerSite.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
